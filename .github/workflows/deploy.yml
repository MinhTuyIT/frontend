name: Release and Deploy Frontend
on:
  push:
    branches:
      - main
      - staging
      - dev
jobs:
  bump_version:
    name: Bump Version
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
      - name: Get next version number
        id: tag_version_dry_run
        uses: mathieudutour/github-tag-action@v6.1
        with:
          release_branches: "main,staging,dev"
          custom_release_rules: "fix:patch:Bug Fixes,chore:patch:Chores,feat:minor:Features,perf:minor:Performance Improvements"
          tag_prefix: ""
          github_token: ${{ secrets.PAT }}
          dry_run: true
      - name: Update package.json
        uses: jaywcjlove/github-action-package@main
        with:
          version: ${{ steps.tag_version_dry_run.outputs.new_tag }}
      - name: Commit and push changes
        uses: devops-infra/action-commit-push@master
        with:
          github_token: "${{ secrets.PAT }}"
          commit_prefix: "[AUTO]"
          commit_message: "bump package.json version to ${{ steps.tag_version_dry_run.outputs.new_tag }} [skip ci]"
          force: false
          # amend: true
          # no_edit: true
      - name: Bump version and push tag
        if: ${{ ! cancelled() }}
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          release_branches: "main,staging,dev"
          custom_release_rules: "fix:patch:Bug Fixes,chore:patch:Chores,feat:minor:Features,perf:minor:Performance Improvements"
          tag_prefix: ""
          github_token: ${{ secrets.PAT }}
  get_version:
    name: Get Version
    needs: [bump_version]
    if: |
      always() &&
      (needs.bump_version.result == 'success' || needs.bump_version.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.current-version }}
      changelog: ${{ steps.get_change_log.outputs.changelog }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - name: Get next version number
        id: get_change_log
        uses: mathieudutour/github-tag-action@v6.1
        with:
          release_branches: "main,staging,dev"
          custom_release_rules: "fix:patch:Bug Fixes,chore:patch:Chores,feat:minor:Features,perf:minor:Performance Improvements"
          tag_prefix: ""
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true
  github_release:
    name: GitHub Release
    continue-on-error: true
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [get_version]
    if: ${{ github.ref_name == 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.get_version.outputs.version }}
          name: Release ${{ needs.get_version.outputs.version }}
          body: ${{ needs.get_version.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}

  checks_jira_setup:
    name: Check Jira Setup
    needs: [get_version]
    runs-on: ubuntu-latest
    outputs:
      has_jira_setup: ${{ steps.check.outputs.has_jira_setup }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: noliran/branch-based-secrets@v1
        with:
          secrets: JIRA_AUTOMATION_WEBHOOK
      - id: check
        run: |
          if [[ -z "${JIRA_AUTOMATION_WEBHOOK}" ]]; then
            echo "has_jira_setup=false" >> $GITHUB_OUTPUT
          else
            echo "has_jira_setup=true" >> $GITHUB_OUTPUT
          fi
        shell: bash
        env:
          JIRA_AUTOMATION_WEBHOOK: ${{ secrets[env.JIRA_AUTOMATION_WEBHOOK_NAME] }}
          GITHUB_OUTPUT: ${{ github.output }}

  jira_release:
    name: Jira Release
    runs-on: ubuntu-latest
    if: |
      always() &&
      (needs.get_version.result == 'success' || needs.get_version.result == 'skipped') && needs.checks_jira_setup.outputs.has_jira_setup == 'true'
    needs: [get_version, checks_jira_setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: noliran/branch-based-secrets@v1
        with:
          secrets: JIRA_AUTOMATION_WEBHOOK
      - name: Create a Jira release
        uses: GeoWerkstatt/create-jira-release@v1
        continue-on-error: true
        with:
          jira-project-key: ${{ vars.JIRA_PROJECT_KEY }}
          jira-automation-webhook: ${{ secrets[env.JIRA_AUTOMATION_WEBHOOK_NAME] }}
          build-version: "${{ github.event.repository.name }} v${{ needs.get_version.outputs.version }}"

  check_eas_setup:
    name: Check EAS Setup
    needs: [get_version]
    runs-on: ubuntu-latest
    outputs:
      has_eas_setup: ${{ steps.check.outputs.has_eas_setup }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: check
        run: |
          if [[ -z "${EXPO_TOKEN}" ]]; then
            echo "has_eas_setup=false" >> $GITHUB_OUTPUT
          else
            echo "has_eas_setup=true" >> $GITHUB_OUTPUT
          fi
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          GITHUB_OUTPUT: ${{ github.output }}

  eas_deploy:
    name: EAS Deploy
    runs-on: ubuntu-latest
    needs: [check_eas_setup]
    if: needs.check_eas_setup.outputs.has_eas_setup == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      - name: Set Env
        run: echo "PUPPETEER_SKIP_DOWNLOAD=true" >> $GITHUB_ENV
      - name: Install dependencies
        run: yarn install
      - name: copy file
        uses: canastro/copy-file-action@master
        with:
          source: ".env.${{ github.ref_name == 'main' && 'production' || github.ref_name == 'dev' && 'development' || github.ref_name}}"
          target: ".env"
      - name: Publish update
        run: STAGE=${{ github.ref_name == 'main' && 'production' || github.ref_name}} eas update --auto
      - name: Prepare Sentry Token
        id: sentry-token
        run: |
          if [[ ! -z "${SENTRY_AUTH_TOKEN}" ]]; then
            echo "SENTRY_AUTH_TOKEN_SET=true" >> $GITHUB_ENV
          else
            echo "SENTRY_AUTH_TOKEN_SET=false" >> $GITHUB_ENV
          fi
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      - name: Notify Sentry
        if: env.SENTRY_AUTH_TOKEN_SET == 'true'
        run: SENTRY_AUTH_TOKEN=${{secrets.SENTRY_AUTH_TOKEN}} npx sentry-expo-upload-sourcemaps dist

  check_vercel_setup:
    name: Check Vercel Setup
    needs: [get_version]
    runs-on: ubuntu-latest
    outputs:
      has_vercel_setup: ${{ steps.check.outputs.has_vercel_setup }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: check
        run: |
          if [[ -z "${VERCEL_TOKEN}" ]]; then
            echo "has_vercel_setup=false" >> $GITHUB_OUTPUT
          else
            echo "has_vercel_setup=true" >> $GITHUB_OUTPUT
          fi
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          GITHUB_OUTPUT: ${{ github.output }}

  vercel_deploy:
    name: Vercel Deploy
    runs-on: ubuntu-latest
    needs: [check_vercel_setup]
    if: needs.check_vercel_setup.outputs.has_vercel_setup == 'true'
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set Env
        run: echo "PUPPETEER_SKIP_DOWNLOAD=true" >> $GITHUB_ENV
      - name: Set vercel env
        run: echo "VERCEL_ENVIRONMENT=${{ github.ref_name == 'main' && 'production' || 'preview'}}" >> $GITHUB_ENV
      - name: Set deploy env
        run: echo "DEPLOY_ENVIRONMENT=${{ github.ref_name == 'main' && 'production' || github.ref_name}}" >> $GITHUB_ENV
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: ENV=$DEPLOY_ENVIRONMENT vercel pull --yes --environment=$VERCEL_ENVIRONMENT --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: ENV=$DEPLOY_ENVIRONMENT vercel build ${{ github.ref_name == 'main' && '--prod' || ''}} --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel  
        id: deploy
        run: ENV=$DEPLOY_ENVIRONMENT vercel deploy --prebuilt ${{ github.ref_name == 'main' && '--prod' || ''}} --token=${{ secrets.VERCEL_TOKEN }}

  check_slack_setup:
    name: Check Slack Setup
    needs: [get_version]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      has_slack_setup: ${{ steps.check.outputs.has_slack_setup }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: check
        run: |
          if [[ -z "${SLACK_BOT_TOKEN}" ]]; then
            echo "has_slack_setup=false" >> $GITHUB_OUTPUT
          else
            echo "has_slack_setup=true" >> $GITHUB_OUTPUT
          fi
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          GITHUB_OUTPUT: ${{ github.output }}
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [get_version, check_slack_setup, eas_deploy, vercel_deploy]
    if: always() && needs.check_slack_setup.outputs.has_slack_setup == 'true'
    steps:
      - name: Convert markdown to slack markdown for issue
        uses: LoveToKnow/slackify-markdown-action@v1.0.0
        id: markdown
        with:
          text: |
            ${{ needs.get_version.outputs.changelog }}
      - name: Update Via Slack
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
              {
                "type": "header",
                "text":
                {
                  "type": "plain_text",
                  "text": "${{ github.ref_name }} - ${{ github.workflow }} (${{ needs.get_version.outputs.version }})",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "<${{ github.event.head_commit.url }}|Build Result>: ${{ (needs.vercel_deploy.result == 'success' || needs.vercel_deploy.result == 'skipped') && (needs.eas_deploy.result == 'success' || needs.eas_deploy.result == 'skipped') && ':white_check_mark:' || ':x:' }}"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ${{ toJSON(steps.markdown.outputs.text) }}
                }
              }
              ]
              }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 
